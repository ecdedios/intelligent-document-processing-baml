###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "../c:\\Users\\Dd\\OneDrive\\Documents\\_github\\intelligent-document-processing-baml\\baml_src\\clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    mutliplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "../c:\\Users\\Dd\\OneDrive\\Documents\\_github\\intelligent-document-processing-baml\\baml_src\\generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.74.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "../c:\\Users\\Dd\\OneDrive\\Documents\\_github\\intelligent-document-processing-baml\\baml_src\\idp.baml": "// MODELS\r\n\r\nclass Appointment {\r\n  day_of_week string\r\n  month string\r\n  date int\r\n  year int\r\n  hour int\r\n  minute int\r\n  ampm string\r\n}\r\n\r\nclass NutritionLabel {\r\n  product string @alias(\"name\")\r\n  description string @description(\"A short description of the product\")\r\n  calories int\r\n  fat int\r\n  fat_ui string @description(\"unit per issue\")\r\n  fat_dv float @description(\"daily value expressed in a percentage\")\r\n  sodium int\r\n  sodium_ui string @description(\"unit per issue\")\r\n  sodium_dv float @description(\"daily value expressed in a percentage\")\r\n  carb int\r\n  carb_ui string @description(\"unit per issue\")\r\n  carb_dv float @description(\"daily value expressed in a percentage\")\r\n  protein int\r\n  protein_ui string @description(\"unit per issue\")\r\n  protein_dv float? @description(\"daily value expressed in a percentage\")\r\n}\r\n\r\nclass ReceiptItem {\r\n  tracking_number string @alias(\"tracking\")\r\n  weight float\r\n  weight_ui string @description(\"unit of issue\")\r\n}\r\n\r\nclass DropOffPackageReceipt {\r\n  line_item ReceiptItem[]\r\n  location string @alias(\"store\")\r\n  address string @description(\"address of the store\")\r\n  day_of_week string\r\n  day int\r\n  month string\r\n  year int\r\n  hour int\r\n  minute int\r\n  ampm string\r\n  total_packages int\r\n  total_packages_ui string @description(\"unit of issue\")\r\n}\r\n\r\n\r\n// FUNCTIONS\r\n\r\nfunction ExtractAppointmentFromImage(appointment_card: image) -> Appointment {\r\n  client \"openai/gpt-4o\"\r\n  prompt #\"\r\n    {{_.role(\"user\")}}\r\n\r\n    Extract details from this image of an appointment card reminder:\r\n    {{ appointment_card }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\nfunction ExtractNutritionLabelFromImage(nutrition_label: image) -> NutritionLabel {\r\n  client \"openai/gpt-4o\"\r\n  prompt #\"\r\n    {{_.role(\"user\")}}\r\n\r\n    Extract the name, description, and nutritional value details from this image:\r\n    {{ nutrition_label }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\nfunction ExtractDropOffPackageReceiptFromImage(package_label: image) -> DropOffPackageReceipt {\r\n  client \"openai/gpt-4o\"\r\n  prompt #\"\r\n    {{_.role(\"user\")}}\r\n\r\n    Extract the details from this image:\r\n    {{ package_label }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\nfunction ChooseATool(user_image: image) -> Appointment | NutritionLabel| DropOffPackageReceipt {\r\nclient \"openai/gpt-4o\"\r\nprompt #\"\r\n    {{_.role(\"user\")}}\r\n\r\n    Given an image, extract info:\r\n    {{ user_image }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n\r\n\r\n\r\n// TESTS\r\n\r\ntest Test_APPOINTMENT {\r\nfunctions [ExtractAppointmentFromImage]\r\n  args {\r\n    appointment_card {\r\n      url \"https://idp-baml-tutorial.s3.us-east-1.amazonaws.com/appointment.jpg\"\r\n    }\r\n  }\r\n}\r\n\r\ntest Test_NUTRITION {\r\nfunctions [ExtractNutritionLabelFromImage]\r\n  args {\r\n    nutrition_label {\r\n      url \"https://idp-baml-tutorial.s3.us-east-1.amazonaws.com/nutrition.jpg\"\r\n    }\r\n  }\r\n}\r\n\r\ntest Test_PACKAGE {\r\nfunctions [ExtractDropOffPackageReceiptFromImage]\r\n  args {\r\n    package_label {\r\n      url \"https://idp-baml-tutorial.s3.us-east-1.amazonaws.com/package.jpg\"\r\n    }\r\n  }\r\n}\r\n\r\ntest Test_TOOL {\r\nfunctions [ChooseATool]\r\n  args {\r\n    user_image {\r\n      url \"https://idp-baml-tutorial.s3.us-east-1.amazonaws.com/nutrition.jpg\"\r\n    }\r\n  }\r\n}",
}

def get_baml_files():
    return file_map